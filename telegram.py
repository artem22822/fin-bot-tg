from config import TOKEN
import logging
import requests
import aiofiles
import aiohttp
import pandas as pd
import asyncio
import re
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
from models import Expense, AsyncSessionLocal
from sqlalchemy.future import select
from aiogram.types import FSInputFile

bot = Bot(token=TOKEN)
dp = Dispatcher()

API_URL = "http://localhost:8000/expense/"

logging.basicConfig(level=logging.INFO)


class ExpenseForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_amount = State()
    waiting_for_period_date = State()
    waiting_for_id = State()
    waiting_for_update_id = State()
    waiting_for_new_amount = State()
    waiting_for_new_name = State()


async def get_all_expenses():
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Expense))
        expenses = result.scalars().all()
        return expenses


add_button = '‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É'
view_button = 'üîé –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏'
del_button = 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É'
update_button = '‚úîÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É'

builder = ReplyKeyboardBuilder()
builder.button(text=add_button)
builder.button(text=view_button)
builder.button(text=del_button)
builder.button(text=update_button)
builder.adjust(1, 1, 1)

menu_keyboard = builder.as_markup(resize_keyboard=True)


@dp.message(Command('start'))
async def start_handler(message: Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–≤–æ—ó—Ö –≤–∏—Ç—Ä–∞—Ç.\n"
        '–û–±–µ—Ä—ñ—Ç—å –î—ñ—é:',
        reply_markup=menu_keyboard,
    )


# ADD BUTTON
@dp.message(F.text == add_button)
async def add_expense_step1(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∏—Ç—Ä–∞—Ç–∏', reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExpenseForm.waiting_for_name)


@dp.message(ExpenseForm.waiting_for_name)
async def add_expense_step2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏—Ç—Ä–∞—Ç–∏ DD.MM.YYYY:')
    await state.set_state(ExpenseForm.waiting_for_date)


@dp.message(ExpenseForm.waiting_for_date)
async def add_expense_step3(message: Message, state: FSMContext):
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    if not re.match(date_pattern, message.text):
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:")
        return

    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤  UAH (–ü—Ä–∏–∫–ª–∞–¥: 150.50)")
    await state.set_state(ExpenseForm.waiting_for_amount)


@dp.message(ExpenseForm.waiting_for_amount)
async def add_expense_finish(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 150.50):")
        return

    user_data = await state.get_data()
    expense_data = {
        "name": user_data["name"],
        "date": user_data["date"],
        "amount": amount
    }

    response = requests.post(API_URL, json=expense_data, headers={"Content-Type": "application/json"})
    print(response, "RESPONSE")
    if response.status_code == 201:
        await message.answer("‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!", reply_markup=menu_keyboard)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=menu_keyboard)

    await state.clear()


# VIEW BUTTON
@dp.message(F.text == view_button)
async def get_expenses_step1(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑ —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏!–ü—Ä–∏–∫–ª–∞–¥ DD.MM.YYYY-DD.MM.YYYY',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExpenseForm.waiting_for_period_date)


@dp.message(ExpenseForm.waiting_for_period_date)
async def get_expenses_step2(message: Message, state: FSMContext):
    date_pattern = r"^(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})$"
    match = re.match(date_pattern, message.text)

    if not match:
        await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: **DD.MM.YYYY-DD.MM.YYYY**')
        return

    start_date_str, end_date_str = match.groups()

    try:
        start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
    except ValueError:
        await message.answer('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.')
        return

    if start_date > end_date:
        await message.answer('–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∞ –∑–∞ –∫—ñ–Ω—Ü–µ–≤—É! –í–≤–µ–¥—ñ—Ç—å –∑–Ω–æ–≤—É.')
        return

    await state.update_data(start_date=start_date, end_date=end_date)

    await message.answer('–ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç...')

    await generate_expense_report(message, start_date, end_date, state)


async def generate_expense_report(message: Message, start_date: datetime, end_date: datetime, state: FSMContext):
    api_url = f"{API_URL}{start_date.strftime('%d.%m.%Y')}/{end_date.strftime('%d.%m.%Y')}/"

    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            if response.status == 404:
                await message.answer('–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.',reply_markup=menu_keyboard)
                await state.clear()
                return

            if response.status != 200:
                await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {response.status}",reply_markup=menu_keyboard)
                return

            expenses = await response.json()

    if not expenses:
        await message.answer('–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç –Ω–µ–º–∞.',reply_markup=menu_keyboard)
        await state.clear()
        return

    data = [(exp['name'], exp['amount'], exp['amount_usd'], exp["date"]) for exp in expenses]
    df = pd.DataFrame(data, columns=["–ù–∞–∑–≤–∞", "–°—É–º–∞ (‚Ç¥)", "–°—É–º–∞ ($)", "–î–∞—Ç–∞"])

    total_amount = sum(exp['amount'] for exp in expenses)
    total_usd = sum(exp['amount_usd'] for exp in expenses)

    df.loc[len(df)] = ["–ò—Ç–æ–≥–æ", total_amount, total_usd, ""]

    file_path = "expenses_report.xlsx"
    async with aiofiles.open(file_path, "wb") as f:
        df.to_excel(file_path, index=False)

    file = FSInputFile(file_path)
    await message.answer_document(
        file, caption=f"–ó–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date.strftime('%d.%m.%Y')} - "
                      f"{end_date.strftime('%d.%m.%Y')}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount}‚Ç¥ ({total_usd:.2f}$)",
        reply_markup=menu_keyboard
    )

    await state.clear()


# DELETE BUTTON
@dp.message(F.text == del_button)
async def get_expenses_all_step1(message: Message, state: FSMContext):
    await message.answer('–ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç...', reply_markup=ReplyKeyboardRemove())
    api_url = f"{API_URL}all/"

    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            if response.status == 404:
                await message.answer('–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.',reply_markup=menu_keyboard)
                await state.clear()
                return

            if response.status != 200:
                await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {response.status}",reply_markup=menu_keyboard)
                await state.clear()
                return

            expenses = await response.json()

    if not expenses:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç –ø—É—Å—Ç–∏–π.", reply_markup=menu_keyboard)
        return

    data = [(exp['id'], exp['name'], exp['amount'], exp['amount_usd'], exp['date']) for exp in expenses]
    df = pd.DataFrame(data, columns=["ID", "–ù–∞–∑–≤–∞", "–°—É–º–∞ (‚Ç¥)", "–°—É–º–∞ ($)", "–î–∞—Ç–∞"])

    file_path = "expenses_all_report.xlsx"
    async with aiofiles.open(file_path, "wb") as f:
        df.to_excel(file_path, index=False)

        file = FSInputFile(file_path)
        await message.answer_document(file, caption=f"All expenses")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –í–∏–¥–∞–ª–∏—Ç–∏!:")
        await state.set_state(ExpenseForm.waiting_for_id)


@dp.message(ExpenseForm.waiting_for_id)
async def delete_expense(message: Message, state: FSMContext):
    try:
        expense_id = int(message.text)
        api_url = f"{API_URL}delete/{expense_id}/"
        async with aiohttp.ClientSession() as session:
            async with session.delete(api_url) as response:
                if response.status == 404:
                    await message.answer(f"–í–∏—Ç—Ä–∞—Ç–∞ –∑ ID {expense_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",reply_markup=menu_keyboard)
                elif response.status == 200:
                    await message.answer(f"–í–∏—Ç—Ä–∞—Ç–∞ –∑ ID {expense_id} –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.",reply_markup=menu_keyboard)
                else:
                    await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {response.status}", reply_markup=menu_keyboard)

    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.", reply_markup=menu_keyboard)

    await state.clear()


# UPDATE BUTTON
@dp.message(F.text == update_button)
async def get_expenses_all_update_step1(message: Message, state: FSMContext):
    await message.answer('–ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç...', reply_markup=ReplyKeyboardRemove())
    api_url = f"{API_URL}all/"
    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            if response.status == 404:
                await message.answer('–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.', reply_markup=menu_keyboard)
                await state.clear()
                return

            if response.status != 200:
                await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {response.status}", reply_markup=menu_keyboard)
                return

            expenses = await response.json()

    if not expenses:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç –ø—É—Å—Ç–∏–π.")
        return

    data = [(exp['id'], exp['name'], exp['amount'], exp['amount_usd'], exp['date']) for exp in expenses]
    df = pd.DataFrame(data, columns=["ID", "–ù–∞–∑–≤–∞", "–°—É–º–∞ (‚Ç¥)", "–°—É–º–∞ ($)", "–î–∞—Ç–∞"])

    file_path = "expenses_all_report.xlsx"
    async with aiofiles.open(file_path, "wb") as f:
        df.to_excel(file_path, index=False)

        file = FSInputFile(file_path)
        await message.answer_document(file, caption=f"All expenses")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:")
        await state.set_state(ExpenseForm.waiting_for_update_id)


@dp.message(ExpenseForm.waiting_for_update_id)
async def get_expense_info(message: Message, state: FSMContext):
    try:
        expense_id = int(message.text)
        api_url = f"{API_URL}{expense_id}/"

        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                if response.status == 404:
                    await message.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Å –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n –í–≤–µ–¥—ñ—Ç—å ID —â–µ —Ä–∞–∑")
                    return

                if response.status != 200:
                    await message.answer(f"–ü–æ–º–∏–ª–∫–∞  –∑–∞–ø–∏—Ç—É: {response.status}",reply_markup=menu_keyboard)
                    return

                expense = await response.json()

        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç :\n"
                             f"ID: {expense['id']}\n"
                             f"–ù–∞–∑–≤–∞: {expense['name']}\n"
                             f"–°—É–º–∞: {expense['amount']}‚Ç¥ / {expense['amount_usd']}$\n"
                             f"–î–∞—Ç–∞: {expense['date'][:10]}\n\n"
                             "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É...:")

        await state.update_data(expense_id=expense["id"])
        await state.set_state(ExpenseForm.waiting_for_new_name)

    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ ID.",reply_markup=menu_keyboard)


@dp.message(ExpenseForm.waiting_for_new_name)
async def update_expense_name(message: Message, state: FSMContext):
    new_name = message.text
    if new_name:
        await state.update_data(new_name=new_name)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏ (–≤ UAH):")
        await state.set_state(ExpenseForm.waiting_for_new_amount)
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏.")


@dp.message(ExpenseForm.waiting_for_new_amount)
async def update_expense_amount(message: Message, state: FSMContext):
    try:
        new_amount = float(message.text)
        data = await state.get_data()
        expense_id = data.get("expense_id")
        new_name = data.get("new_name")

        update_data = {
            "name": new_name,
            "amount": new_amount
        }

        async with aiohttp.ClientSession() as session:
            async with session.put(f"{API_URL}update/{expense_id}/", json=update_data) as response:
                if response.status == 404:
                    await message.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–∞–∫–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–µ —ñ—Å–Ω—É—î.",reply_markup=menu_keyboard)
                elif response.status == 200:
                    await message.answer(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ –∑ ID {expense_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.",reply_markup=menu_keyboard)
                else:
                    await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {response.status}",reply_markup=menu_keyboard)

        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å  –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.", reply_markup=menu_keyboard )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
